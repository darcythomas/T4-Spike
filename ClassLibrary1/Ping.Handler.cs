/*
/
/This content is autogenerated, any edits to this file will be lost.
/
*/

using MediatR;
using FluentValidation;
using System;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;
using ClassLibrary1;

namespace GeneratedHandlers
{
    public partial class PingHandler: PingHandlerBase {
	   public PingHandler(IPingService pingService) : base(pingService){}
	}

    public  abstract partial class PingHandlerBase : IRequestHandler<Ping, String>
    {
        private readonly IPingService _pingService;

        public PingHandlerBase(IPingService pingService)
        {
            _pingService = pingService;
        }
      
        public virtual Task<String> Handle(Ping request, CancellationToken cancellationToken)
        {
            return _pingService.Query(request);
        }
    }

	public partial class PingValidator : AbstractValidator<Ping> {}

	public static class PingExtension
	{
	    public static IServiceCollection AddPingClasses(this IServiceCollection self ){
		
		   return self;
		}
	}
}

/*
/
/This content is autogenerated, any edits to this file will be lost.
/
*/












