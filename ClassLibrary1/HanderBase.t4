<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
/*
/
/This content is autogenerated, any edits to this file will be lost.
/
*/
<#+ 
void GenerateHandler(string modelName, string returnType, string nameSpace = "GeneratedHandlers", IList<String> nameSpacesToInclude = null, string serviceType = null, string serviceMethod = null)
{
    var lower = modelName.ToLower();
    var serviceName =  $"{lower}Service";

    nameSpacesToInclude = nameSpacesToInclude ?? new List<String>();
	serviceType = serviceType ?? $"I{modelName}Service";
    serviceMethod = serviceMethod ?? $"Query";

#>
using MediatR;
using FluentValidation;
using System;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;
<#+ AddNameSpaces(nameSpacesToInclude); #>

namespace <#= nameSpace #>
{
    public partial class <#= modelName #>Handler: <#= modelName #>HandlerBase {
	   public <#= modelName #>Handler(I<#= modelName #>Service <#= lower #>Service) : base(<#= lower #>Service){}
	}

    public  abstract partial class <#= modelName #>HandlerBase : IRequestHandler<<#= modelName #>, <#= returnType #>>
    {
        private readonly <#= serviceType #> _<#= serviceName #>;

        public <#= modelName #>HandlerBase(<#= serviceType #> <#= serviceName #>)
        {
            _<#= serviceName #> = <#= serviceName #>;
        }
      
        public virtual Task<<#= returnType #>> Handle(<#= modelName #> request, CancellationToken cancellationToken)
        {
            return _<#= serviceName #>.<#= serviceMethod #>(request);
        }
    }

	public partial class <#= modelName #>Validator : AbstractValidator<<#= modelName #>> {}

	public static class <#= modelName #>Extension
	{
	    public static IServiceCollection Add<#= modelName #>Classes(this IServiceCollection self ){
		
		   return self;
		}
	}
}

/*
/
/This content is autogenerated, any edits to this file will be lost.
/
*/
<#+
}
#>


<#+
  void AddNameSpaces(IList<string> nameSpacesToInclude){
    foreach (var ns in nameSpacesToInclude)
    {
#>
using <#= ns #>;
<#+          
    }
}
#>
